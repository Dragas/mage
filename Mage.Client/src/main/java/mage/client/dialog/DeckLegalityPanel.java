/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mage.client.dialog;

import java.awt.Color;
import java.awt.Dimension;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Stream;

import mage.cards.decks.Deck;
import mage.cards.decks.DeckValidator;
import mage.client.MageFrame;
import mage.deck.*;
import org.apache.log4j.Logger;

import javax.swing.*;

/**
 * @author Joe
 */
public class DeckLegalityPanel extends javax.swing.JPanel {

    private static final org.apache.log4j.Logger LOGGER = Logger.getLogger(MageFrame.class);
    protected static final Color COLOR_UNKNOWN = new Color(174, 174, 174);
    protected static final Color COLOR_LEGAL = new Color(117, 152, 110);
    protected static final Color COLOR_NOT_LEGAL = new Color(191, 84, 74);
    protected static final Color COLOR_TEXT = new Color(255, 255, 255);
    protected static final Dimension DIM_MINIMUM = new Dimension(75, 25);
    protected static final Dimension DIM_MAXIMUM = new Dimension(150, 50);
    protected static final Dimension DIM_PREFERRED = new Dimension(75, 25);
    protected static Map<DeckValidator, JLabel> validatorMap;

    /**
     * Creates new form DeckLegalityPanel
     */
    public DeckLegalityPanel() {
        validatorMap = Stream.of(
                new Standard(), new Pioneer(), new Modern(), new Pauper(), new HistoricalType2(),
                new Legacy(), new Vintage(), new Eternal(), new Frontier(), new Momir(),
                new Commander(), new Brawl(), new Oathbreaker(), new PennyDreadfulCommander(), new TinyLeaders()
        ).collect(LinkedHashMap::new, (m, v) -> m.put(v, null), LinkedHashMap::putAll); // necessary workaround, since Collectors.toMap does not allow null values

        initComponents();
        initDeckLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        previewUknown = new javax.swing.JLabel();
        previewLegal = new javax.swing.JLabel();
        previewNotLegal = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(85, 35));
        setName("DeckLegalityPanel"); // NOI18N
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        previewUknown.setBackground(new java.awt.Color(174, 174, 174));
        previewUknown.setForeground(new java.awt.Color(255, 255, 255));
        previewUknown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewUknown.setText("Unknown");
        previewUknown.setMaximumSize(new java.awt.Dimension(150, 50));
        previewUknown.setMinimumSize(new java.awt.Dimension(75, 25));
        previewUknown.setName("previewUknown"); // NOI18N
        previewUknown.setOpaque(true);
        previewUknown.setPreferredSize(new java.awt.Dimension(75, 25));
        add(previewUknown);

        previewLegal.setBackground(new java.awt.Color(117, 152, 110));
        previewLegal.setForeground(new java.awt.Color(255, 255, 255));
        previewLegal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewLegal.setText("Legal");
        previewLegal.setMaximumSize(new java.awt.Dimension(150, 50));
        previewLegal.setMinimumSize(new java.awt.Dimension(75, 25));
        previewLegal.setName("previewLegal"); // NOI18N
        previewLegal.setOpaque(true);
        previewLegal.setPreferredSize(new java.awt.Dimension(75, 25));
        add(previewLegal);

        previewNotLegal.setBackground(new java.awt.Color(191, 84, 74));
        previewNotLegal.setForeground(new java.awt.Color(255, 255, 255));
        previewNotLegal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previewNotLegal.setText("Not Legal");
        previewNotLegal.setMaximumSize(new java.awt.Dimension(150, 50));
        previewNotLegal.setMinimumSize(new java.awt.Dimension(75, 25));
        previewNotLegal.setName("previewNotLegal"); // NOI18N
        previewNotLegal.setOpaque(true);
        previewNotLegal.setPreferredSize(new java.awt.Dimension(75, 25));
        add(previewNotLegal);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel previewLegal;
    private javax.swing.JLabel previewNotLegal;
    private javax.swing.JLabel previewUknown;
    // End of variables declaration//GEN-END:variables

    private void initDeckLabels() {
        JLabel label;

        remove(previewUknown);
        remove(previewLegal);
        remove(previewNotLegal);

        for (DeckValidator val : validatorMap.keySet()) {
            label = new JLabel();
            label.setBackground(COLOR_UNKNOWN);
            label.setForeground(COLOR_TEXT);
            label.setHorizontalAlignment(SwingConstants.CENTER);
            label.setText(val.getShortName());
            label.setMaximumSize(DIM_MAXIMUM);
            label.setMinimumSize(DIM_MINIMUM);
            label.setName(val.getShortName()); // NOI18N
            label.setOpaque(true);
            label.setPreferredSize(DIM_PREFERRED);

            add(label);

            validatorMap.put(val, label);
        }

        revalidate();
        //pack();
        repaint();
    }

    protected String formatInvalidTooltip(Map<String, String> invalid) {
        return invalid.entrySet().stream()
                .sorted(Map.Entry.comparingByKey())
                .reduce("<html><body><p>Deck is <span style='color:#BF544A;font-weight:bold;'>INVALID</span></p><u>The following problems have been found:</u><br/><table>",
                        (str, entry) -> String.format("%s<tr><td><b>%s</b></td><td>%s</td></tr>", str, entry.getKey(), entry.getValue()), String::concat)
                + "</table></body></html>";
    }

    public void validateDeck(Deck deck) {
        validatorMap.forEach((validator, label) -> {
            try {
                if (validator.validate(deck)) {
                    label.setBackground(COLOR_LEGAL);
                    label.setToolTipText("<html>Deck is <span style='color:green;font-weight:bold;'>VALID</span></html>");

                } else {
                    label.setBackground(COLOR_NOT_LEGAL);
                    label.setToolTipText(formatInvalidTooltip(validator.getInvalid()));
                }
            } catch (Exception e) {
                LOGGER.error("Error validating deck against " + validator.getName() + " rules", e);
                label.setBackground(COLOR_UNKNOWN);
                label.setToolTipText("<html><body><b>Deck could not be validated!</b><br>An error occurred while validating this deck.</body></html>");
            }
        });
    }

}
